var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = WGPUCompute","category":"page"},{"location":"#WGPUCompute","page":"Home","title":"WGPUCompute","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for WGPUCompute.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [WGPUCompute]","category":"page"},{"location":"#WGPUCompute.cast-Union{Tuple{N}, Tuple{T}, Tuple{DataType, WgpuArray{T, N}}} where {T, N}","page":"Home","title":"WGPUCompute.cast","text":"cast(S::DataType, x::WgpuArray{T, N}) where {T, N}\n\nThis is a wrapper function for cast_kernel kernel function. This is meant  for users to cast from regular julia functions.\n\n\n\n\n\n","category":"method"},{"location":"#WGPUCompute.cast_kernel-Union{Tuple{N}, Tuple{S}, Tuple{T}, Tuple{WgpuArray{T, N}, WgpuArray{S, N}}} where {T, S, N}","page":"Home","title":"WGPUCompute.cast_kernel","text":"cast_kernel(x::WgpuArray{T, N}, out::WgpuArray{S, N}) where {T, S, N}\n\nThis is a compute kernel which casts the x array of eltype T to eltype S. Users are not supposed to use this function call from julia. This instead needs to  be wrapped with an additional function which uses @wgpukernel macro call to convert the julia function definition to a equivalent WGPU kernel function.\n\n\n\n\n\n","category":"method"},{"location":"#WGPUCompute.clamp-Union{Tuple{N}, Tuple{T}, Tuple{WgpuArray{T, N}, T, T}} where {T, N}","page":"Home","title":"WGPUCompute.clamp","text":"clamp(x::WgpuArray{T, N}, minValue::T, maxValue::T) where {T, N}\n\nThis is a clamp operator which takes WgpuArray as an input along with lower bound and upper bound clamp values to clamp the input array to these bounds\n\n\n\n\n\n","category":"method"},{"location":"#WGPUCompute.matmul-Union{Tuple{N}, Tuple{T}, Tuple{WgpuArray{T, N}, WgpuArray{T, N}}} where {T, N}","page":"Home","title":"WGPUCompute.matmul","text":"matmul(x::WgpuArray{T, N}, y::WgpuArray{T, N}) where {T, N}\n\nThis is wrapper function for end users which uses naive implementation of matrix multiplication  naive_matmul_kernel kernel for matrix computation. \n\n\n\n\n\n","category":"method"},{"location":"#WGPUCompute.matmul_heuristics-Tuple{Any, Any}","page":"Home","title":"WGPUCompute.matmul_heuristics","text":"matmul_heuristics(x, y)\n\nThis function computes workgroup size and workgroup count heuristics for a given input. This is used by naive_matmul_kernel.\n\n\n\n\n\n","category":"method"},{"location":"#WGPUCompute.naive_matmul_kernel-Union{Tuple{N}, Tuple{T}, Tuple{WgpuArray{T, N}, WgpuArray{T, N}, WgpuArray{T, N}}} where {T, N}","page":"Home","title":"WGPUCompute.naive_matmul_kernel","text":"naive_matmul_kernel(x::WgpuArray{T, N}, y::WgpuArray{T, N}, out::WgpuArray{T, N}) where {T, N}\n\nThis is naive matrix multiplication implementation kernel. This is not supposed to be used as a regular julia function. This needs to be passed to @wgpukernel to under transformations to WGSL compatible shader code.\n\n\n\n\n\n","category":"method"},{"location":"#WGPUCompute.tiled_matmul-Union{Tuple{N}, Tuple{T}, Tuple{WgpuArray{T, N}, WgpuArray{T, N}}} where {T, N}","page":"Home","title":"WGPUCompute.tiled_matmul","text":"tiled_matmul(x::WgpuArray{T, N}, y::WgpuArray{T, N}) where {T, N}\n\nThis is user end matrix multiplication function which carries out tiled matrix multiplication of input WgpuArray arguments.\n\n\n\n\n\n","category":"method"},{"location":"#WGPUCompute.tiled_matmul_heuristics-Union{Tuple{N}, Tuple{T}, Tuple{WgpuArray{T, N}, WgpuArray{T, N}}} where {T, N}","page":"Home","title":"WGPUCompute.tiled_matmul_heuristics","text":"tiled_matmul_heuristics(x::WgpuArray{T, N}, y::WgpuArray{T, N}) where {T, N}\n\nThis function computes workgroup size and workgroup count for a given input for tiled_matmul_heuristics kernel function.\n\n\n\n\n\n","category":"method"},{"location":"#WGPUCompute.tiled_matmul_kernel-Union{Tuple{N}, Tuple{T}, Tuple{WgpuArray{T, N}, WgpuArray{T, N}, WgpuArray{T, N}}} where {T, N}","page":"Home","title":"WGPUCompute.tiled_matmul_kernel","text":"tiled_matmul_kernel(x::WgpuArray{T, N}, y::WgpuArray{T, N}, out::WgpuArray{T, N}) where {T, N}\n\nThis is compute kernel which carries out tiled matrix multiplication of input WgpuArrays. This is  not supposed to be used as a regular julia function. This instead needs to be passed to @wgpukernel macro inside a wrapper function.\n\n\n\n\n\n","category":"method"}]
}
